%module{Slic3r::XS};

%{
#include <myinit.h>
#include "Polygon.hpp"
%}

%name{Slic3r::Polygon} class Polygon {
    ~Polygon();
    Polygon* clone()
        %code{% const char* CLASS = "Slic3r::Polygon"; RETVAL = new Polygon(*THIS); %};
    SV* arrayref()
        %code{% RETVAL = THIS->to_AV(); %};
    SV* pp()
        %code{% RETVAL = THIS->to_SV_pureperl(); %};
    void scale(double factor);
    void translate(double x, double y);
    void reverse();
    Lines lines();
    Polyline* split_at(Point* point)
        %code{% const char* CLASS = "Slic3r::Polyline"; RETVAL = THIS->split_at(point); %};
    Polyline* split_at_index(int index)
        %code{% const char* CLASS = "Slic3r::Polyline"; RETVAL = THIS->split_at_index(index); %};
    Polyline* split_at_first_point()
        %code{% const char* CLASS = "Slic3r::Polyline"; RETVAL = THIS->split_at_first_point(); %};
    double area();
    bool is_counter_clockwise();
    bool is_clockwise();
    bool make_counter_clockwise();
    bool make_clockwise();
    bool is_valid();
    Point* first_point()
        %code{% const char* CLASS = "Slic3r::Point"; RETVAL = THIS->first_point(); %};
%{

Polygon*
Polygon::new(...)
    CODE:
        RETVAL = new Polygon ();
        // ST(0) is class name, ST(1) is first point
        RETVAL->points.resize(items-1);
        for (unsigned int i = 1; i < items; i++) {
            RETVAL->points[i-1].from_SV_check( ST(i) );
        }
    OUTPUT:
        RETVAL

void
Polygon::rotate(angle, center_sv)
    double  angle;
    SV*     center_sv;
    CODE:
        Point center;
        center.from_SV_check(center_sv);
        THIS->rotate(angle, &center);

%}
};
